"""Interfaces for the executive summary."""
import os

from nipype.interfaces.base import Directory, File, OutputMultiPath, TraitedSpec, traits
from nipype.interfaces.fsl.base import FSLCommand, FSLCommandInputSpec


class _SlicesDirInputSpec(FSLCommandInputSpec):
    is_pairs = traits.Bool(
        argstr="-o",
        position=0,
        desc="filelist is pairs ( <underlying> <red-outline> ) of images",
    )
    outline_image = File(
        exists=True,
        argstr="-p %s",
        position=1,
        desc="use <image> as red-outline image on top of all images in <filelist>",
    )
    edge_threshold = traits.Float(
        argstr="-e %.03f",
        position=2,
        desc=(
            "use the specified threshold for edges (if >0 use this proportion of max-min, "
            "if <0, use the absolute value)"
        ),
    )
    output_odd_axials = traits.Bool(
        argstr="-S",
        position=3,
        desc="output every second axial slice rather than just 9 ortho slices",
    )
    in_files = OutputMultiPath(
        File(exists=True),
        mandatory=True,
        position=-1,
        desc="List of files to process.",
    )


class _SlicesDirOutputSpec(TraitedSpec):
    out_dir = Directory(exists=True, desc="Output directory.")
    out_files = OutputMultiPath(File(exists=True), desc="List of generated PNG files.")


class SlicesDir(FSLCommand):
    """Run slicesdir.

    Notes
    -----
    Usage: slicesdir [-o] [-p <image>] [-e <thr>] [-S] <filelist>
    -o         :  filelist is pairs ( <underlying> <red-outline> ) of images
    -p <image> :  use <image> as red-outline image on top of all images in <filelist>
    -e <thr>   :  use the specified threshold for edges (if >0 use this proportion of max-min,
                  if <0, use the absolute value)
    -S         :  output every second axial slice rather than just 9 ortho slices
    """

    _cmd = "slicesdir"
    input_spec = _SlicesDirInputSpec
    output_spec = _SlicesDirOutputSpec

    def _list_outputs(self):
        """Create a Bunch which contains all possible files generated by running the interface.

        Some files are always generated, others depending on which ``inputs`` options are set.

        Returns
        -------
        outputs : Bunch object
            Bunch object containing all possible files generated by
            interface object.
            If None, file was not generated
            Else, contains path, filename of generated outputfile
        """
        outputs = self._outputs().get()

        out_dir = os.path.abspath(os.path.join(os.getcwd(), "slicesdir"))
        outputs["out_dir"] = out_dir
        outputs["out_files"] = [
            self._gen_fname(basename=f, cwd=out_dir, ext=".png")
            for f in self.inputs.in_files
        ]
        return outputs

    def _gen_filename(self, name):
        if name == "out_files":
            return self._list_outputs()[name]

        return None


class _PNGAppendInputSpec(FSLCommandInputSpec):
    in_files = OutputMultiPath(
        File(exists=True),
        mandatory=True,
        position=0,
        desc="List of files to process.",
    )
    out_file = File(exists=False, mandatory=True, position=1, desc="Output file.")


class _PNGAppendOutputSpec(TraitedSpec):
    out_file = File(exists=True, desc="Output file.")


class PNGAppend(FSLCommand):
    """Run pngappend.

    Notes
    -----
    pngappend  -  append PNG files horizontally and/or vertically into a new PNG (or GIF) file

    Usage: pngappend <input 1> <+|-> [n] <input 2> [<+|-> [n] <input n>]  output>

    + appends horizontally,
    - appends vertically (i.e. works like a linebreak)
    [n] number ofgap pixels
    note that files with .gif extension will be input/output in GIF format
    """

    _cmd = "pngappend"
    input_spec = _PNGAppendInputSpec
    output_spec = _PNGAppendOutputSpec

    def _format_arg(self, name, spec, value):

        if name == "in_files":
            if isinstance(value, str):
                value = [value]

            return " + ".join(value)

        return super(PNGAppend, self)._format_arg(name, spec, value)
