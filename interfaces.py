"""Interfaces for the executive summary."""
import os

from nipype.interfaces.base import (
    CommandLineInputSpec,
    Directory,
    File,
    OutputMultiPath,
    TraitedSpec,
    traits,
)
from nipype.interfaces.fsl.base import FSLCommand, FSLCommandInputSpec
from nipype.interfaces.workbench.base import WBCommand


class _SlicesDirInputSpec(FSLCommandInputSpec):
    is_pairs = traits.Bool(
        argstr="-o",
        position=0,
        desc="filelist is pairs ( <underlying> <red-outline> ) of images",
    )
    outline_image = File(
        exists=True,
        argstr="-p %s",
        position=1,
        desc="use <image> as red-outline image on top of all images in <filelist>",
    )
    edge_threshold = traits.Float(
        argstr="-e %.03f",
        position=2,
        desc=(
            "use the specified threshold for edges (if >0 use this proportion of max-min, "
            "if <0, use the absolute value)"
        ),
    )
    output_odd_axials = traits.Bool(
        argstr="-S",
        position=3,
        desc="output every second axial slice rather than just 9 ortho slices",
    )
    in_files = OutputMultiPath(
        File(exists=True),
        mandatory=True,
        position=-1,
        desc="List of files to process.",
    )


class _SlicesDirOutputSpec(TraitedSpec):
    out_dir = Directory(exists=True, desc="Output directory.")
    out_files = OutputMultiPath(File(exists=True), desc="List of generated PNG files.")


class SlicesDir(FSLCommand):
    """Run slicesdir.

    Notes
    -----
    Usage: slicesdir [-o] [-p <image>] [-e <thr>] [-S] <filelist>
    -o         :  filelist is pairs ( <underlying> <red-outline> ) of images
    -p <image> :  use <image> as red-outline image on top of all images in <filelist>
    -e <thr>   :  use the specified threshold for edges (if >0 use this proportion of max-min,
                  if <0, use the absolute value)
    -S         :  output every second axial slice rather than just 9 ortho slices
    """

    _cmd = "slicesdir"
    input_spec = _SlicesDirInputSpec
    output_spec = _SlicesDirOutputSpec

    def _list_outputs(self):
        """Create a Bunch which contains all possible files generated by running the interface.

        Some files are always generated, others depending on which ``inputs`` options are set.

        Returns
        -------
        outputs : Bunch object
            Bunch object containing all possible files generated by
            interface object.
            If None, file was not generated
            Else, contains path, filename of generated outputfile
        """
        outputs = self._outputs().get()

        out_dir = os.path.abspath(os.path.join(os.getcwd(), "slicesdir"))
        outputs["out_dir"] = out_dir
        outputs["out_files"] = [
            self._gen_fname(basename=f, cwd=out_dir, ext=".png")
            for f in self.inputs.in_files
        ]
        return outputs

    def _gen_filename(self, name):
        if name == "out_files":
            return self._list_outputs()[name]

        return None


class _PNGAppendInputSpec(FSLCommandInputSpec):
    in_files = OutputMultiPath(
        File(exists=True),
        mandatory=True,
        position=0,
        desc="List of files to process.",
    )
    out_file = File(exists=False, mandatory=True, position=1, desc="Output file.")


class _PNGAppendOutputSpec(TraitedSpec):
    out_file = File(exists=True, desc="Output file.")


class PNGAppend(FSLCommand):
    """Run pngappend.

    Notes
    -----
    pngappend  -  append PNG files horizontally and/or vertically into a new PNG (or GIF) file

    Usage: pngappend <input 1> <+|-> [n] <input 2> [<+|-> [n] <input n>]  output>

    + appends horizontally,
    - appends vertically (i.e. works like a linebreak)
    [n] number ofgap pixels
    note that files with .gif extension will be input/output in GIF format
    """

    _cmd = "pngappend"
    input_spec = _PNGAppendInputSpec
    output_spec = _PNGAppendOutputSpec

    def _format_arg(self, name, spec, value):

        if name == "in_files":
            if isinstance(value, str):
                value = [value]

            return " + ".join(value)

        return super(PNGAppend, self)._format_arg(name, spec, value)


class _ShowSceneInputSpec(CommandLineInputSpec):
    scene_file = File(
        exists=True,
        mandatory=True,
        argstr="%s",
        position=0,
    )
    scene_name_or_number = traits.Either(
        traits.Int,
        traits.Str,
        mandatory=True,
        position=1,
        argstr="%s",
        desc="name or number (starting at one) of the scene in the scene file",
    )
    out_file = File(
        exists=False,
        mandatory=True,
        argstr="%s",
        position=2,
        desc="output image file name",
    )
    image_width = traits.Int(
        mandatory=True,
        argstr="%s",
        position=3,
        desc="width of output image(s), in pixels",
    )
    image_height = traits.Int(
        mandatory=True,
        argstr="%s",
        position=4,
        desc="height of output image(s), in pixels",
    )


class _ShowSceneOutputSpec(TraitedSpec):
    out_file = File(exists=True, desc="output image file name")


class ShowScene(WBCommand):
    """Offscreen rendering of scene to an image file.

    Notes
    -----
    wb_command -show-scene
        <scene-file> - scene file
        <scene-name-or-number> - name or number (starting at one) of the scene in
            the scene file
        <image-file-name> - output image file name
        <image-width> - width of output image(s), in pixels
        <image-height> - height of output image(s), in pixels

        [-use-window-size] - Override image size with window size

        [-no-scene-colors] - Do not use background and foreground colors in scene

        [-set-map-yoke] - Override selected map index for a map yoking group.
            <Map Yoking Roman Numeral> - Roman numeral identifying the map yoking
            group (I, II, III, IV, V, VI, VII, VIII, IX, X)
            <Map Index> - Map index for yoking group.  Indices start at 1 (one)

        [-conn-db-login] - Login for scenes with files in Connectome Database
            <Username> - Connectome DB Username
            <Password> - Connectome DB Password

        Render content of browser windows displayed in a scene into image
        file(s).  The image file name should be similar to "capture.png".  If
        there is only one image to render, the image name will not change.  If
        there is more than one image to render, an index will be inserted into
        the image name: "capture_01.png", "capture_02.png" etc.

        If the scene references files in the Connectome Database,
        the "-conn-db-login" option is available for providing the
        username and password.  If this options is not specified,
        the username and password stored in the user's preferences
        is used.

        The image format is determined by the image file extension.
        The available image formats may vary by operating system.
        Image formats available on this system are:
            bmp
            jpeg
            jpg
            png
            ppm
            tif
            tiff

        The result of using the "-use-window-size" option
        is dependent upon the version used to create the scene.
            * Versions 1.2 and newer contain the width and
            height of the graphics region.  The output image
            will be the width and height from the scene and
            the image width and height specified on the command
            line is ignored.
            * If the scene does not contain the width and height
            of the graphics region, the width and height specified
            on the command line is used for the size of the
            output image.
    """

    input_spec = _ShowSceneInputSpec
    output_spec = _ShowSceneOutputSpec
    _cmd = "wb_command -show-scene"
